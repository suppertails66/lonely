#include "gamedata/LaylaVulnerabilityArray.h"
#include "structs/SaveHelper.h"
#include "structs/LoadHelper.h"
#include "util/ByteConversion.h"

namespace Lonely {


LaylaVulnerabilityArray::LaylaVulnerabilityArray() { };
  
LaylaVulnerabilityArray::LaylaVulnerabilityArray(int size__)
  : flags_(size__) { };

void LaylaVulnerabilityArray::readFromData(const Tbyte* src) {
  for (int i = 0; i < flags_.size(); i++) {
//    flags_[i] = *(src++);
    flags_[i].readFromData(src++);
  }
}
  
void LaylaVulnerabilityArray::writeToData(Tbyte* dst) const {
  for (int i = 0; i < flags_.size(); i++) {
//    *(dst++) = flags_[i];
    flags_[i].writeToData(dst++);
  }
}

int LaylaVulnerabilityArray::size() const {
  return flags_.size();
}

LaylaVulnerabilitySettings& LaylaVulnerabilityArray::flags(int index) {
  return flags_[index];
}

const LaylaVulnerabilitySettings&
    LaylaVulnerabilityArray::flags(int index) const {
  return flags_[index];
}
  
int LaylaVulnerabilityArray::save(Tstring& data) const {
  int total = 0;
  
  SaveHelper::saveInt(data, flags_.size(), ByteSizes::uint8Size);
  total += ByteSizes::uint8Size;
  
  Tbyte buffer[4];
  for (int i = 0; i < flags_.size(); i++) {
    total += flags_[i].writeToData(buffer);
    data += Tstring((char*)buffer, flags_[i].size);
  }
  
  return total;
}

int LaylaVulnerabilityArray::load(const Tbyte* data) {
  int total = 0;
  
  int flagsSize
    = LoadHelper::loadInt(data, total, ByteSizes::uint8Size);
  
  flags_.resize(flagsSize);
  for (int i = 0; i < flags_.size(); i++) {
    total += flags_[i].readFromData(data + total);
  }
  
  return total;
  
//  return flags_.load(data);
}


};
